# stages:
#   - dependencies
#   - lint
#   - test
#   - package_deploy
#   - deploy

# variables:
#   DOCKER_BUILDKIT: 1
#   COMPOSE_DOCKER_CLI_BUILD: 1

# .pnpm_common:
#   stage: deps
#   image: node:18.16.0-alpine3.17
#   tags:
#     - nsfw-1
#   before_script:
#     - echo -en "\nDOMAIN=$DOMAIN\nSUBDOMAIN=$SUBDOMAIN\n" > .env
#     - cat "$ENV" >> .env
#     - source .env
#     - corepack enable
#     - corepack prepare pnpm@8.6.0 --activate
#     - npm install -g pnpm
#     - node -v && npm -v && pnpm -v
#     - >
#       [ -d pnpm-store ] || mkdir -p pnpm-store
#     - pnpm config set store-dir pnpm-store
#     - pnpm install
#   cache:
#     key:
#       files:
#         - pnpm-lock.yaml
#     paths:
#       - pnpm-store

# lint:
#   extends: .pnpm_common
#   stage: lint
#   script:
#     - pnpm lint
#   rules:
#     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
#       when: on_success
#       changes:
#         - '**/*.{js,jsx,ts,tsx,css}'
#         - '.eslintrc.json'
#         - '.eslintignore'
#         - '.stylelintrc.json'
#         - '.stylelintignore'
#         - 'prettier.config.js'
#         - '.prettierignore'
#         - 'package.json'
#         - 'pnpm-lock.yaml'
#         - 'tsconfig.json'
#         - '.gitlab-ci.yml'
#   when: on_success
#   timeout: 10 minutes

# # test:
# #   extends: .pnpm_common
# #   stage: lint
# #   script:
# #     - pnpm test
# #   rules:
# #     - if: $CI_PIPELINE_SOURCE == "merge_request_event"
# #       when: on_success
# #       changes:
# #         - '**/*.{js,jsx,ts,tsx,css}'
# #         - 'package.json'
# #         - 'pnpm-lock.yaml'
# #         - 'tsconfig.json'
# #         - '.gitlab-ci.yml'
# #   when: on_success
# #   timeout: 10 minutes

# package_deploy:
#   image: docker/compose
#   stage: package_deploy
#   tags:
#     - nsfw-1
#   before_script:
#     - echo -en "\nDOMAIN=$DOMAIN\nSUBDOMAIN=$SUBDOMAIN\n" > .env && cat "$ENV" >> .env && source .env
#     - apk add --no-cache curl
#     - sh ./scripts/ci/notify.sh "üöÄ DEPLOY"
#     - docker info
#     - docker-compose version
#     - docker-compose config
#     - docker-compose ps
#   script:
#     # - docker-compose --env-file .env build
#     # - docker-compose --env-file .env stop
#     # - docker-compose --env-file .env down
#     # - docker-compose --env-file .env up -d
#     - docker-compose --env-file .env up -d --build
#   after_script:
#     - apk add --no-cache curl
#     - >
#       if [[ $CI_JOB_STATUS == 'success' ]]; then
#         sh ./scripts/ci/notify.sh "‚úÖ DEPLOYED"
#       elif [[ $CI_JOB_STATUS == 'canceled' ]]; then
#         sh ./scripts/ci/notify.sh "‚ö†Ô∏è DEPLOY CANCELED"
#       elif [[ $CI_JOB_STATUS == 'failed' ]]; then
#         sh ./scripts/ci/notify.sh "‚ùå DEPLOY FAILED"
#         exit 1
#       else
#         sh ./scripts/ci/notify.sh "‚ùì UNKNOWN CI_JOB_STATUS"
#         exit 1
#       fi
#   environment:
#     name: production
#     url: https://goraku.icu
#     on_stop: stop
#   timeout: 20 minutes
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#       when: on_success

# # stop
# stop:
#   stage: package_deploy
#   image: docker/compose
#   tags:
#     - nsfw-1
#   script:
#     - docker-compose --env-file .env down
#     - apk add --no-cache curl
#     - sh ./scripts/ci/notify.sh "‚úã STOPPED"
#   when: manual
#   environment:
#     name: production
#     action: stop
#   timeout: 5 minutes
#   rules:
#     - if: $CI_COMMIT_BRANCH == "main"
#       when: manual
